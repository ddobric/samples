// Code generated by Microsoft (R) AutoRest Code Generator 0.9.6.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ConsoleApplication;
using ConsoleApplication.Models;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace ConsoleApplication
{
    public partial class TwilioConnector : ServiceClient<TwilioConnector>, ITwilioConnector
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
            set { this._baseUri = value; }
        }
        
        private ServiceClientCredentials _credentials;
        
        /// <summary>
        /// Credentials for authenticating with the service.
        /// </summary>
        public ServiceClientCredentials Credentials
        {
            get { return this._credentials; }
            set { this._credentials = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        public TwilioConnector()
            : base()
        {
            this._baseUri = new Uri("http://twilioconnector0a9bf7da014b41daa512e394d3dd6828.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public TwilioConnector(params DelegatingHandler[] handlers)
            : base(handlers)
        {
            this._baseUri = new Uri("http://twilioconnector0a9bf7da014b41daa512e394d3dd6828.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public TwilioConnector(HttpClientHandler rootHandler, params DelegatingHandler[] handlers)
            : base(rootHandler, handlers)
        {
            this._baseUri = new Uri("http://twilioconnector0a9bf7da014b41daa512e394d3dd6828.azurewebsites.net");
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public TwilioConnector(Uri baseUri, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._baseUri = baseUri;
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials for authenticating with the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public TwilioConnector(ServiceClientCredentials credentials, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }
        
        /// <summary>
        /// Initializes a new instance of the TwilioConnector class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials for authenticating with the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The set of delegating handlers to insert in the http
        /// client pipeline.
        /// </param>
        public TwilioConnector(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers)
            : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._baseUri = baseUri;
            this._credentials = credentials;
            
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }
        
        /// <summary>
        /// If a phone number is provided instead, adds a new phone number to
        /// your account. If an area code is provided, adds a random phone
        /// number available for the area depending on the Area Code provided.
        /// </summary>
        /// <param name='addIncomingPhoneNumberRequest'>
        /// Required. Add Incoming Phone Number Request Model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IncomingPhoneNumber>> AddIncomingNumberWithOperationResponseAsync(AddIncomingPhoneNumberRequest addIncomingPhoneNumberRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (addIncomingPhoneNumberRequest == null)
            {
                throw new ArgumentNullException("addIncomingPhoneNumberRequest");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("addIncomingPhoneNumberRequest", addIncomingPhoneNumberRequest);
                ServiceClientTracing.Enter(invocationId, this, "AddIncomingNumberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/IncomingPhoneNumbers";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Post;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Headers
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Serialize Request
            string requestContent = null;
            JToken requestDoc = addIncomingPhoneNumberRequest.SerializeJson(null);
            requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
            httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IncomingPhoneNumber> result = new HttpOperationResponse<IncomingPhoneNumber>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IncomingPhoneNumber resultModel = new IncomingPhoneNumber();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a list of local available phone numbers, each representing
        /// a phone number that is currently available for your account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Local Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Local Numbers Contains a specific number
        /// </param>
        /// <param name='smsEnabled'>
        /// Optional. Sms Enabled on the numbers?
        /// </param>
        /// <param name='mmsEnabled'>
        /// Optional. Mms Enabled on the numbers?
        /// </param>
        /// <param name='voiceEnabled'>
        /// Optional. Voice Enabled on the numbers?
        /// </param>
        /// <param name='inPostalCode'>
        /// Optional. Postal code of the number
        /// </param>
        /// <param name='inRegion'>
        /// Optional. Number belongs to which region
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableLocalNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, bool? smsEnabled = null, bool? mmsEnabled = null, bool? voiceEnabled = null, string inPostalCode = null, string inRegion = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (isoCountryCode == null)
            {
                throw new ArgumentNullException("isoCountryCode");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("isoCountryCode", isoCountryCode);
                tracingParameters.Add("areaCode", areaCode);
                tracingParameters.Add("contains", contains);
                tracingParameters.Add("smsEnabled", smsEnabled);
                tracingParameters.Add("mmsEnabled", mmsEnabled);
                tracingParameters.Add("voiceEnabled", voiceEnabled);
                tracingParameters.Add("inPostalCode", inPostalCode);
                tracingParameters.Add("inRegion", inRegion);
                ServiceClientTracing.Enter(invocationId, this, "GetAvailableLocalNumbersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/AvailablePhoneNumbers/";
            url = url + Uri.EscapeDataString(isoCountryCode);
            url = url + "/Local";
            List<string> queryParameters = new List<string>();
            if (areaCode != null)
            {
                queryParameters.Add("AreaCode=" + Uri.EscapeDataString(areaCode));
            }
            if (contains != null)
            {
                queryParameters.Add("Contains=" + Uri.EscapeDataString(contains));
            }
            if (smsEnabled != null)
            {
                queryParameters.Add("SmsEnabled=" + Uri.EscapeDataString(smsEnabled.Value.ToString().ToLower()));
            }
            if (mmsEnabled != null)
            {
                queryParameters.Add("MmsEnabled=" + Uri.EscapeDataString(mmsEnabled.Value.ToString().ToLower()));
            }
            if (voiceEnabled != null)
            {
                queryParameters.Add("VoiceEnabled=" + Uri.EscapeDataString(voiceEnabled.Value.ToString().ToLower()));
            }
            if (inPostalCode != null)
            {
                queryParameters.Add("InPostalCode=" + Uri.EscapeDataString(inPostalCode));
            }
            if (inRegion != null)
            {
                queryParameters.Add("InRegion=" + Uri.EscapeDataString(inRegion));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<AvailablePhoneNumbers>> result = new HttpOperationResponse<IList<AvailablePhoneNumbers>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<AvailablePhoneNumbers> resultModel = new List<AvailablePhoneNumbers>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = AvailablePhoneNumbersCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a list of mobile available phone numbers, each representing
        /// a phone number that is currently available for your account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Mobile Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Mobile Numbers Contains a specific number
        /// </param>
        /// <param name='smsEnabled'>
        /// Optional. Sms Enabled on the numbers?
        /// </param>
        /// <param name='mmsEnabled'>
        /// Optional. Mms Enabled on the numbers?
        /// </param>
        /// <param name='voiceEnabled'>
        /// Optional. Voice Enabled on the numbers?
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableMobileNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, bool? smsEnabled = null, bool? mmsEnabled = null, bool? voiceEnabled = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (isoCountryCode == null)
            {
                throw new ArgumentNullException("isoCountryCode");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("isoCountryCode", isoCountryCode);
                tracingParameters.Add("areaCode", areaCode);
                tracingParameters.Add("contains", contains);
                tracingParameters.Add("smsEnabled", smsEnabled);
                tracingParameters.Add("mmsEnabled", mmsEnabled);
                tracingParameters.Add("voiceEnabled", voiceEnabled);
                ServiceClientTracing.Enter(invocationId, this, "GetAvailableMobileNumbersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/AvailablePhoneNumbers/";
            url = url + Uri.EscapeDataString(isoCountryCode);
            url = url + "/Mobile";
            List<string> queryParameters = new List<string>();
            if (areaCode != null)
            {
                queryParameters.Add("AreaCode=" + Uri.EscapeDataString(areaCode));
            }
            if (contains != null)
            {
                queryParameters.Add("Contains=" + Uri.EscapeDataString(contains));
            }
            if (smsEnabled != null)
            {
                queryParameters.Add("SmsEnabled=" + Uri.EscapeDataString(smsEnabled.Value.ToString().ToLower()));
            }
            if (mmsEnabled != null)
            {
                queryParameters.Add("MmsEnabled=" + Uri.EscapeDataString(mmsEnabled.Value.ToString().ToLower()));
            }
            if (voiceEnabled != null)
            {
                queryParameters.Add("VoiceEnabled=" + Uri.EscapeDataString(voiceEnabled.Value.ToString().ToLower()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<AvailablePhoneNumbers>> result = new HttpOperationResponse<IList<AvailablePhoneNumbers>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<AvailablePhoneNumbers> resultModel = new List<AvailablePhoneNumbers>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = AvailablePhoneNumbersCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a list of toll-free available phone numbers, each
        /// representing a phone number that is currently available for your
        /// account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Toll Free Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Toll Free Numbers Contains a specific number
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableTollFreeNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (isoCountryCode == null)
            {
                throw new ArgumentNullException("isoCountryCode");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("isoCountryCode", isoCountryCode);
                tracingParameters.Add("areaCode", areaCode);
                tracingParameters.Add("contains", contains);
                ServiceClientTracing.Enter(invocationId, this, "GetAvailableTollFreeNumbersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/AvailablePhoneNumbers/";
            url = url + Uri.EscapeDataString(isoCountryCode);
            url = url + "/TollFree";
            List<string> queryParameters = new List<string>();
            if (areaCode != null)
            {
                queryParameters.Add("AreaCode=" + Uri.EscapeDataString(areaCode));
            }
            if (contains != null)
            {
                queryParameters.Add("Contains=" + Uri.EscapeDataString(contains));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<AvailablePhoneNumbers>> result = new HttpOperationResponse<IList<AvailablePhoneNumbers>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<AvailablePhoneNumbers> resultModel = new List<AvailablePhoneNumbers>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = AvailablePhoneNumbersCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Fetches the details of a phone number purchased from Twilio.
        /// </summary>
        /// <param name='incomingPhoneNumberSid'>
        /// Required. Incoming Phone number ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IncomingPhoneNumber>> GetIncomingPhoneNumberWithOperationResponseAsync(string incomingPhoneNumberSid, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (incomingPhoneNumberSid == null)
            {
                throw new ArgumentNullException("incomingPhoneNumberSid");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("incomingPhoneNumberSid", incomingPhoneNumberSid);
                ServiceClientTracing.Enter(invocationId, this, "GetIncomingPhoneNumberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/IncomingPhoneNumbers/";
            url = url + Uri.EscapeDataString(incomingPhoneNumberSid);
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IncomingPhoneNumber> result = new HttpOperationResponse<IncomingPhoneNumber>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IncomingPhoneNumber resultModel = new IncomingPhoneNumber();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a single Message Specified by the provided Message ID.
        /// </summary>
        /// <param name='messageId'>
        /// Required. Message ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<MessageResponse>> GetMessageWithOperationResponseAsync(string messageId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (messageId == null)
            {
                throw new ArgumentNullException("messageId");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("messageId", messageId);
                ServiceClientTracing.Enter(invocationId, this, "GetMessageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/Messages/";
            url = url + Uri.EscapeDataString(messageId);
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<MessageResponse> result = new HttpOperationResponse<MessageResponse>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                MessageResponse resultModel = new MessageResponse();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a list of incoming phone number resources, each
        /// representing a phone number given to your account.
        /// </summary>
        /// <param name='phoneNumber'>
        /// Optional. Specific Phone numbers to be queried
        /// </param>
        /// <param name='friendlyName'>
        /// Optional. Friendly Name
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<IncomingPhoneNumber>>> ListIncomingPhoneNumbersWithOperationResponseAsync(string phoneNumber = null, string friendlyName = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("phoneNumber", phoneNumber);
                tracingParameters.Add("friendlyName", friendlyName);
                tracingParameters.Add("pageSize", pageSize);
                ServiceClientTracing.Enter(invocationId, this, "ListIncomingPhoneNumbersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/IncomingPhoneNumbers";
            List<string> queryParameters = new List<string>();
            if (phoneNumber != null)
            {
                queryParameters.Add("PhoneNumber=" + Uri.EscapeDataString(phoneNumber));
            }
            if (friendlyName != null)
            {
                queryParameters.Add("FriendlyName=" + Uri.EscapeDataString(friendlyName));
            }
            if (pageSize != null)
            {
                queryParameters.Add("PageSize=" + Uri.EscapeDataString(pageSize.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<IncomingPhoneNumber>> result = new HttpOperationResponse<IList<IncomingPhoneNumber>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<IncomingPhoneNumber> resultModel = new List<IncomingPhoneNumber>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = IncomingPhoneNumberCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a list of messages associated with your account
        /// </summary>
        /// <param name='to'>
        /// Optional. Phone Number the message was sent To
        /// </param>
        /// <param name='fromParameter'>
        /// Optional. Phone Number the message was sent From
        /// </param>
        /// <param name='dateSent'>
        /// Optional. Date the message was sent
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<MessageResponse>>> ListMessagesWithOperationResponseAsync(string to = null, string fromParameter = null, DateTimeOffset? dateSent = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("to", to);
                tracingParameters.Add("fromParameter", fromParameter);
                tracingParameters.Add("dateSent", dateSent);
                tracingParameters.Add("pageSize", pageSize);
                ServiceClientTracing.Enter(invocationId, this, "ListMessagesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/Messages";
            List<string> queryParameters = new List<string>();
            if (to != null)
            {
                queryParameters.Add("To=" + Uri.EscapeDataString(to));
            }
            if (fromParameter != null)
            {
                queryParameters.Add("From=" + Uri.EscapeDataString(fromParameter));
            }
            if (dateSent != null)
            {
                queryParameters.Add("DateSent=" + Uri.EscapeDataString(dateSent.Value.ToString()));
            }
            if (pageSize != null)
            {
                queryParameters.Add("PageSize=" + Uri.EscapeDataString(pageSize.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<MessageResponse>> result = new HttpOperationResponse<IList<MessageResponse>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<MessageResponse> resultModel = new List<MessageResponse>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = MessageResponseCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Returns Usage records for usage categories
        /// </summary>
        /// <param name='category'>
        /// Optional. Category of usage
        /// </param>
        /// <param name='subResource'>
        /// Optional. Sub Resource
        /// </param>
        /// <param name='endDate'>
        /// Optional. List usage upto a given date
        /// </param>
        /// <param name='startDate'>
        /// Optional. List usage from a given date
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<UsageRecords>>> ListUsageWithOperationResponseAsync(string category = null, string subResource = null, string endDate = null, string startDate = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("category", category);
                tracingParameters.Add("subResource", subResource);
                tracingParameters.Add("endDate", endDate);
                tracingParameters.Add("startDate", startDate);
                tracingParameters.Add("pageSize", pageSize);
                ServiceClientTracing.Enter(invocationId, this, "ListUsageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/Usage/Records";
            List<string> queryParameters = new List<string>();
            if (category != null)
            {
                queryParameters.Add("Category=" + Uri.EscapeDataString(category));
            }
            if (subResource != null)
            {
                queryParameters.Add("SubResource=" + Uri.EscapeDataString(subResource));
            }
            if (endDate != null)
            {
                queryParameters.Add("EndDate=" + Uri.EscapeDataString(endDate));
            }
            if (startDate != null)
            {
                queryParameters.Add("StartDate=" + Uri.EscapeDataString(startDate));
            }
            if (pageSize != null)
            {
                queryParameters.Add("PageSize=" + Uri.EscapeDataString(pageSize.Value.ToString()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<IList<UsageRecords>> result = new HttpOperationResponse<IList<UsageRecords>>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                IList<UsageRecords> resultModel = new List<UsageRecords>();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = UsageRecordsCollection.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
        
        /// <summary>
        /// Send a new outgoing message to a mobile number.
        /// </summary>
        /// <param name='sendMessageRequest'>
        /// Required. Send Message Request Model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<SendMessageResponse>> SendMessageWithOperationResponseAsync(SendMessageRequest sendMessageRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (sendMessageRequest == null)
            {
                throw new ArgumentNullException("sendMessageRequest");
            }
            
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sendMessageRequest", sendMessageRequest);
                ServiceClientTracing.Enter(invocationId, this, "SendMessageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/twilio/Messages";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Post;
            httpRequest.RequestUri = new Uri(url);
            
            // Set Headers
            
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            
            // Serialize Request
            string requestContent = null;
            JToken requestDoc = sendMessageRequest.SerializeJson(null);
            requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
            httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
            
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.BadRequest && statusCode != HttpStatusCode.NotFound && statusCode != HttpStatusCode.InternalServerError)
            {
                HttpOperationException<object> ex = new HttpOperationException<object>();
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            
            // Create Result
            HttpOperationResponse<SendMessageResponse> result = new HttpOperationResponse<SendMessageResponse>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            
            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                SendMessageResponse resultModel = new SendMessageResponse();
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel.DeserializeJson(responseDoc);
                }
                result.Body = resultModel;
            }
            
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
    }
}
