// Code generated by Microsoft (R) AutoRest Code Generator 0.9.6.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ConsoleApplication.Models;
using Microsoft.Rest;

namespace ConsoleApplication
{
    public partial interface ITwilioConnector : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri
        {
            get; set; 
        }
        
        /// <summary>
        /// Credentials for authenticating with the service.
        /// </summary>
        ServiceClientCredentials Credentials
        {
            get; set; 
        }
        
        /// <summary>
        /// If a phone number is provided instead, adds a new phone number to
        /// your account. If an area code is provided, adds a random phone
        /// number available for the area depending on the Area Code provided.
        /// </summary>
        /// <param name='addIncomingPhoneNumberRequest'>
        /// Required. Add Incoming Phone Number Request Model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IncomingPhoneNumber>> AddIncomingNumberWithOperationResponseAsync(AddIncomingPhoneNumberRequest addIncomingPhoneNumberRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a list of local available phone numbers, each representing
        /// a phone number that is currently available for your account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Local Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Local Numbers Contains a specific number
        /// </param>
        /// <param name='smsEnabled'>
        /// Optional. Sms Enabled on the numbers?
        /// </param>
        /// <param name='mmsEnabled'>
        /// Optional. Mms Enabled on the numbers?
        /// </param>
        /// <param name='voiceEnabled'>
        /// Optional. Voice Enabled on the numbers?
        /// </param>
        /// <param name='inPostalCode'>
        /// Optional. Postal code of the number
        /// </param>
        /// <param name='inRegion'>
        /// Optional. Number belongs to which region
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableLocalNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, bool? smsEnabled = null, bool? mmsEnabled = null, bool? voiceEnabled = null, string inPostalCode = null, string inRegion = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a list of mobile available phone numbers, each representing
        /// a phone number that is currently available for your account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Mobile Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Mobile Numbers Contains a specific number
        /// </param>
        /// <param name='smsEnabled'>
        /// Optional. Sms Enabled on the numbers?
        /// </param>
        /// <param name='mmsEnabled'>
        /// Optional. Mms Enabled on the numbers?
        /// </param>
        /// <param name='voiceEnabled'>
        /// Optional. Voice Enabled on the numbers?
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableMobileNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, bool? smsEnabled = null, bool? mmsEnabled = null, bool? voiceEnabled = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a list of toll-free available phone numbers, each
        /// representing a phone number that is currently available for your
        /// account
        /// </summary>
        /// <param name='isoCountryCode'>
        /// Required. Iso country code of the Toll Free Numbers
        /// </param>
        /// <param name='areaCode'>
        /// Optional. Area Code of the Toll Free Numbers
        /// </param>
        /// <param name='contains'>
        /// Optional. Toll Free Numbers Contains a specific number
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AvailablePhoneNumbers>>> GetAvailableTollFreeNumbersWithOperationResponseAsync(string isoCountryCode, string areaCode = null, string contains = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Fetches the details of a phone number purchased from Twilio.
        /// </summary>
        /// <param name='incomingPhoneNumberSid'>
        /// Required. Incoming Phone number ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IncomingPhoneNumber>> GetIncomingPhoneNumberWithOperationResponseAsync(string incomingPhoneNumberSid, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a single Message Specified by the provided Message ID.
        /// </summary>
        /// <param name='messageId'>
        /// Required. Message ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<MessageResponse>> GetMessageWithOperationResponseAsync(string messageId, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a list of incoming phone number resources, each
        /// representing a phone number given to your account.
        /// </summary>
        /// <param name='phoneNumber'>
        /// Optional. Specific Phone numbers to be queried
        /// </param>
        /// <param name='friendlyName'>
        /// Optional. Friendly Name
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IncomingPhoneNumber>>> ListIncomingPhoneNumbersWithOperationResponseAsync(string phoneNumber = null, string friendlyName = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns a list of messages associated with your account
        /// </summary>
        /// <param name='to'>
        /// Optional. Phone Number the message was sent To
        /// </param>
        /// <param name='fromParameter'>
        /// Optional. Phone Number the message was sent From
        /// </param>
        /// <param name='dateSent'>
        /// Optional. Date the message was sent
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<MessageResponse>>> ListMessagesWithOperationResponseAsync(string to = null, string fromParameter = null, DateTimeOffset? dateSent = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Returns Usage records for usage categories
        /// </summary>
        /// <param name='category'>
        /// Optional. Category of usage
        /// </param>
        /// <param name='subResource'>
        /// Optional. Sub Resource
        /// </param>
        /// <param name='endDate'>
        /// Optional. List usage upto a given date
        /// </param>
        /// <param name='startDate'>
        /// Optional. List usage from a given date
        /// </param>
        /// <param name='pageSize'>
        /// Optional. Maximum number of results
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UsageRecords>>> ListUsageWithOperationResponseAsync(string category = null, string subResource = null, string endDate = null, string startDate = null, int? pageSize = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <summary>
        /// Send a new outgoing message to a mobile number.
        /// </summary>
        /// <param name='sendMessageRequest'>
        /// Required. Send Message Request Model
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<SendMessageResponse>> SendMessageWithOperationResponseAsync(SendMessageRequest sendMessageRequest, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
